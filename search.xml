<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【git】update fork project // TODO</title>
      <link href="/2019/02/17/0005-git-fork-update/"/>
      <url>/2019/02/17/0005-git-fork-update/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：// TODO</p></blockquote><hr><p>参考：</p><p><a href="https://www.cnblogs.com/walblog/articles/9061960.html" target="_blank" rel="noopener">github如何实现fork的项目与原项目同步</a></p><p><a href="https://www.cnblogs.com/relucent/p/6479213.html" target="_blank" rel="noopener">Github上fork项目后与原项目保持同步</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】first pull request</title>
      <link href="/2019/02/16/0004-git-pull-request/"/>
      <url>/2019/02/16/0004-git-pull-request/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：在使用 Hexo + github 搭建博客平台之后，更换主题为cactus，一款黑色背景的护眼主题，发现存在不完善的地方，所以决定通过 pull request 对其进行完善。（也就是当github上的开源项目在使用过程中出现个性化的需求，便可以通过fork定制符合个人需求的版本，或者通过pull request完善其功能，修复其bug）</p></blockquote><p><strong>目标：解决使用<code>hexo s</code>启动遇到的”bad indentation”问题：</strong><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0937rmdxej30vg0dsnau.jpg" alt="屏幕快照 2019-02-17 07.52.08"></p><hr><p>步骤：</p><p>首先，进入hexo博客目录</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08qmctujej30nk06qq3z.jpg" alt="屏幕快照 2019-02-16 01"></p><p>先删除themes目录下的cactus主题：<code>rm -rf themes/cactus</code></p><p>fork源项目到自己的仓库</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g08qljuarbj31lk0qyjyf.jpg" alt="屏幕快照 2019-02-16 02"></p><p>clone自己仓库下的项目到themes目录下</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08qqgureuj30vk092ahs.jpg" alt="屏幕快照 2019-02-16 03"></p><p>重命名为cactus：<code>mv hexo-theme-cactus cactus</code></p><p><strong>接下来，进入cactus目录，正式开始修改代码并创建pull request：</strong></p><p>创建新分支：<code>git checkout -b branch-tony</code></p><p>修改languages/zh-TW.yml：找到<code>page: %d / %d</code>改为<code>page: 第 %d 頁，共 %d 頁</code></p><p>提交代码到自己仓库下的项目中</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g093z868x1j30vo0gik17.jpg" alt="屏幕快照 2019-02-17 08.13.03"></p><p>这时看到自己仓库中的项目多了一个branch，点击<code>Compare &amp; pull request</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0940nb3ghj31j80mmter.jpg" alt="屏幕快照 2019-02-17 08.17.02"></p><p>编辑并<code>Create pull request</code>（编辑忘记截图）</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g094a1smyej31k20msag5.jpg" alt="屏幕快照 2019-02-17 08.30.24"></p><p><strong>完成，等待原作者的comment &amp; merge</strong></p><p>总结：当我们使用github上的开源项目发现有bug而自己又能改时，需要：1.先把原仓库的原项目fork到自己的仓库作为自己的项目（注意这时自己仓库中的项目是与原项目独立的两个项目）；2.git clone到本地；3.创建branch，修改本地项目，并push到创建的branch；4.在github上create pull request（注意上方教程直接create pull request到原仓库的原项目，实际上自己仓库中fork过来的项目没有改变，这时可以再create pull request到自己仓库的项目，一般建议创建branch修改再create pull request，这样能保持自己仓库中的项目定制化的配置。）</p><hr><p>参考：</p><p><a href="https://www.cnblogs.com/zhangjianbin/p/7774073.html" target="_blank" rel="noopener">创建 Pull Request</a></p><p><a href="https://blog.csdn.net/wangzi11111111/article/details/79861056" target="_blank" rel="noopener">如何使用github中的pull request功能？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch】using docker-compose to set up elasticsearch cluster</title>
      <link href="/2019/02/14/0003-linode-centos7-es-cluster/"/>
      <url>/2019/02/14/0003-linode-centos7-es-cluster/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：在学习Elasticsearch框架之前，必须先让Elasticsearch集群跑起来，最简单且容易迁移的办法就是使用docker。</p></blockquote><p><strong>目标：搭建Elasticsearch集群，并完成测试。</strong></p><p>环境：centos7, openjdk1.8, docker 18.09.1, docker-compose 1.23.2, </p><hr><p>步骤：</p><p><strong>检查环境</strong></p><p>查看jdk版本：<code>java -version</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09t8xqvqfj30bk01ut8k.jpg" alt="2019.02.14 - 01 - 01"></p><p>查看docker版本：<code>docker version</code></p><p>查看 docker-compose 版本：<code>docker-compose version</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09t98sfx8j30ag0a7q34.jpg" alt="2019.02.14 - 01 - 02"></p><p><strong>通过docker安装Elasticsearch（参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Elasticsearch官网</a>）</strong></p><p>通过docker拉取es镜像：<code>docker pull docker.elastic.co/elasticsearch/elasticsearch:6.6.0</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09tbjztb9j30iq04vjrh.jpg" alt="2019.02.14 - 01 - 03"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09tc26joxj30od03yq32.jpg" alt="2019.02.14 - 01 - 04"></p><p>设置kernel setting：<code>sysctl -w vm.max_map_count=262144</code>（PS： 每次重启服务器都需要设置，文末提供永久设置的方法）</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09tcisvicj30bt00zjr6.jpg" alt="2019.02.14 - 01 - 05"></p><p>创建并进入目录：<code>~/docker/elk</code></p><p>创建并编辑docker-compose.yml：<code>vim docker-compose.yml</code></p><p>保存并退出：<code>:wq</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09td093ruj30g90p1t95.jpg" alt="2019.02.14 - 01 - 06"></p><p>启动当前docker-compose容器：<code>docker-compose up</code>（后台启动：<code>docker-compose up -d</code>）</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09tdnsuosj309b01zt8j.jpg" alt="2019.02.14 - 01 - 07"></p><p>测试es是否成功启动：访问<code>http://{ip}:9200</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09te3srlsj30gx0bdjro.jpg" alt="2019.02.14 - 01 - 08"></p><p>关闭当前docker-compose容器：<code>docker-compose down</code></p><p><strong>在docker上集成运行Kibana（Kibana实现Elasticsearch的数据可视化，部分参考<a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">Kibana官网</a>）</strong></p><p>通过docker拉取kibana镜像：<code>docker pull docker.elastic.co/kibana/kibana:6.6.0</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09tfr6ouhj30fw05ljri.jpg" alt="2019.02.14 - 01 - 09"></p><p>进入目录：<code>~/docker/elk</code></p><p>再次编辑docker-compose.yml（即es的docker-compose.yml）：<code>vim docker-compose.yml</code></p><p>保存并退出：<code>:wq</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09tg0ijrlj30gs0ow74w.jpg" alt="2019.02.14 - 01 - 10"></p><p>启动当前docker-compose容器：<code>docker-compose up</code>（后台启动：<code>docker-compose up -d</code>）</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09tgenen2j30b101x0sk.jpg" alt="2019.02.14 - 01 - 11"></p><p>测试kibana是否成功启动：访问<code>http://{ip}:5601</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09tgp2o66j30bl0iq75p.jpg" alt="2019.02.14 - 01 - 12"></p><p><strong>成功搭建Elasticsearch应用，可以开始开发全文检索服务了</strong></p><p>PS：docker启动的容器每次关闭之后数据就会自动清除，如果想要保存数据就要做存储映射，即把容器的数据映射到本机。</p><hr><p>补充：</p><p>实现容器数据映射到主机，只需要修改docker-compose.yml：<code>vim docker-compose.yml</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09tiobh3wj30h70p00td.jpg" alt="2019.02.14 - 01 - 13"></p><p>再次启动发现报错</p><blockquote><p>遇到问题：<code>java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes</code></p><p>问题原因：容器内用户在宿主机创建映射目录，但是没有写权限</p><p>解决办法：<code>chmod 777 ./esdata*</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09tm413kxj30d3035mx3.jpg" alt="2019.02.14 - 01 - 14"></p><p>参考：<a href="https://blog.csdn.net/A_Story_Donkey/article/details/85235234" target="_blank" rel="noopener">docker elasticsearch挂载宿主机报 java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes</a></p></blockquote><p>然后再次启动就能正常。</p><hr><p>参考：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Elasticsearch官网</a></p><p><a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">Kibana官网</a></p><hr><p>常见问题：</p><blockquote><p>Creating network “elk_default” with the default driver<br>ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule:  (iptables failed: iptables –wait -t nat -I DOCKER -i br-15789cc8f3fb -j RETURN: iptables: No chain/target/match by that name.<br>(exit status 1))</p><p>解决办法：重新启动docker服务：<code>systemctl restart docker</code></p></blockquote><blockquote><p>永久设置kernel setting：</p><p>修改系统设置：<code>vim /etc/sysctl.conf</code></p><p>在尾行添加以下内容：<code>vm.max_map_count=262144</code></p><p>执行命令：<code>sysctl -p</code></p><p>参考：<a href="https://blog.csdn.net/qq_35394891/article/details/84345747" target="_blank" rel="noopener">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</a></p></blockquote><blockquote><p>通过<code>docker-compose up -d</code>后台启动如何查看启动日志：</p><p>查看容器启动日志：<code>docker-compose logs</code></p><p>分页查看容器启动日志：<code>docker-compose logs | more</code>  </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> linode </tag>
            
            <tag> centos7 </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】add local project to github</title>
      <link href="/2019/02/13/0002-local-push-github/"/>
      <url>/2019/02/13/0002-local-push-github/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：对于创建项目，更常见的做法是在本地通过ide创建，如果想要利用github共享项目，协作开发，就需要把本地创建的项目上传到github。</p></blockquote><p><strong>目标：在本地通过IDEA创建springboot项目，并将其与github仓库关联，测试基本的pull和push操作。</strong></p><p>环境：Intellij IDEA ULTIMATE 2018.03, jdk 1.8</p><hr><p>步骤：</p><p><strong>本地新建项目</strong></p><p>IDEA &gt; 菜单栏 File &gt; New &gt; Project &gt; Spring Initializr &gt; 填写项目信息，选择项目框架 &gt; Finish</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09jlshdiqj30np0lj3yz.jpg" alt="2019.02.13 - 02 - 01"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jmrk5anj30np0ljglv.jpg" alt="2019.02.13 - 02 - 02"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jo0lxhdj30np0lj0td.jpg" alt="2019.02.13 - 02 - 03"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jo882cmj30np0lj3yj.jpg" alt="2019.02.13 - 02 - 04"></p><p><strong>github新建仓库</strong></p><p>github &gt; New Repository &gt; 填写仓库信息，选择”Initialize this repository with a README”，选择.gitignore &gt; Create repository（复制IDEA中的.gitignore文件，复制github中.gitignore文件内容至IDEA中）</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09joli92wj30lv0hi0ta.jpg" alt="2019.02.13 - 02 - 05"></p><p><strong>关联本地项目至github仓库</strong></p><p>IDEA中删除自动创建的maven文件</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09jq05jd9j31hc0swq44.jpg" alt="2019.02.13 - 02 - 06"></p><p>打开git工具，cd进入本地项目FullTextSearchService</p><p>初始化项目，加入git管理：<code>git init</code></p><p>将所有文件加入git：<code>git add .</code> </p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09jrhzmhpj30g50aamxm.jpg" alt="2019.02.13 - 02 - 07"></p><p>提交到本地仓库：<code>git commit -m &quot;init&quot;</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09jrw0ye1j30g70aajrw.jpg" alt="2019.02.13 - 02 - 08"></p><p>关联本地项目与github仓库：<code>git remote add origin https://github.com/tony-chenjy/FullTextSearchService.git</code></p><p>本地项目上传至github：<code>git push -u origin master</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09jsdyrghj30g70aadge.jpg" alt="2019.02.13 - 02 - 09"></p><blockquote><p>遇到问题：<code>Updates were rejected because the remote contains work that you do</code></p><p>问题原因：由于初始化时生成了.gitignore和README文件，push之前没有pull最新版本导致报错。所以要先pull。（其实这个时候本地项目已经关联上github仓库了，但是要先解决文件冲突才能正确同步）</p><p>解决办法：</p><p>  查看本地项目所关联的仓库：<code>git remote -v</code></p><p>  从仓库更新本地项目：<code>git fetch</code></p><p>  从仓库更新本地项目：<code>git pull</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jtj1w1mj30g80aajrt.jpg" alt="2019.02.13 - 02 - 10"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09jw5pw0kj30g70aaaai.jpg" alt="2019.02.13 - 02 - 11"></p></blockquote><blockquote><p>遇到问题：<code>fatal: refusing to merge unrelated histories</code></p><p>问题原因：“其实这个问题是因为两个根本不相干的 git 库，一个是本地库，一个是远端库，然后本地要去推送到远端，远端觉得这个本地库跟自己不相干，所以告知无法合并”</p><p>解决办法：不相关仓库强制合并：<code>git pull origin master --allow-unrelated-histories</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09jwl17n4j30g50aa0t6.jpg" alt="2019.02.13 - 02 - 12"></p><p>参考：<a href="https://www.centos.bz/2018/03/git-%e5%87%ba%e7%8e%b0-fatal-refusing-to-merge-unrelated-histories-%e9%94%99%e8%af%af/" target="_blank" rel="noopener">git 出现 fatal: refusing to merge unrelated histories 错误</a></p></blockquote><blockquote><p>遇到问题：<code>CONFLICT (add/add): Merge conflict in .gitignore</code></p><p>问题原因：.gitignore文件冲突</p><p>解决办法：</p><p>  打开IDEA，修改冲突文件</p><p>  在git中标记冲突解决：<code>git stash clear</code></p><p>参考：<a href="https://www.cnblogs.com/baby123/p/6588378.html" target="_blank" rel="noopener">git 冲突解决</a></p></blockquote><p>重新提交：<code>git add .</code></p><p>重新提交：<code>git commit -m &quot;conflict clear&quot;</code></p><p>重新提交：<code>git push origin master</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09jxrpliij30g90abmxn.jpg" alt="2019.02.13 - 02 - 13"></p><p><strong>本地项目与github仓库关联完毕。</strong></p><p>PS：其实如果在github创建空的仓库，关联的时候应该就不会出现冲突，但是通过合并两个.gitignore的文件就能同时使用github和IDEA排除提交的规则。</p><hr><p>参考：</p><p><a href="https://www.cnblogs.com/shenchanghui/p/7184101.html" target="_blank" rel="noopener">如何把本地项目上传到Github</a>    </p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】using hexo to set up blog in github</title>
      <link href="/2019/02/12/0001-hexo-github-blog/"/>
      <url>/2019/02/12/0001-hexo-github-blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言： // TODO</p></blockquote><p>环境：macbook pro 2018, </p><hr><p>参考：</p><p><a href="http://cxyxiaowu.com/posts/6993/" title="程序员小吴" target="_blank" rel="noopener">【新手向】从零开始搭建一个酷炫免费的个人博客</a></p><p><a href="https://github.com/probberechts/hexo-theme-cactus/blob/master/README.md" target="_blank" rel="noopener">hexo-theme-cactus</a></p><p><a href="https://www.jianshu.com/p/c42b48d26068/" target="_blank" rel="noopener">iPic - MAC图床神器</a></p><hr><p>常见问题：</p><blockquote><p>关联好github之后直接hexo d提示：<code>deploy not found: git</code></p><p>解决办法：先运行：<code>npm install --save hexo-deployer-git</code></p><p>参考：<a href="https://blog.csdn.net/weixin_36401046/article/details/52940313" target="_blank" rel="noopener">hexo d后 ERROR Deployer not found: git</a></p></blockquote><blockquote><p><code>WARN No layout: index.html</code></p><p>解决办法：下载主题到themes中</p><p>参考：<a href="https://blog.csdn.net/Mint6/article/details/79830063" target="_blank" rel="noopener">hexo搭建博客出现的两个错误</a></p></blockquote><blockquote><p><code>ERROR Process failed: languages/zh-TW.yml</code></p><p><code>YAMLException: bad indentation of a mapping entry at line 42, column 9:</code></p><p>​      <code>page: %d / %d</code></p><p>解决办法：已向远程仓库创建pull request：<a href="https://tony-chenjy.github.io/2019/02/17/git-pull-request/" target="_blank" rel="noopener">【git】first pull request</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/06/0000-hello-world/"/>
      <url>/2019/02/06/0000-hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
