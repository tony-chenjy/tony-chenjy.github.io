<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【SpringMVC】SpringMVC source code - HandlerAdapter &amp; Adapter Design Pattern</title>
      <link href="/2019/03/21/0010-adapter-design-pattern/"/>
      <url>/2019/03/21/0010-adapter-design-pattern/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://tony-chenjy.github.io/2019/03/20/0009-springmvc-source-code/" target="_blank" rel="noopener">【SpringMVC】SpringMVC Source Code - Running Process</a></p><p>In the passage above, we looked into the source code of SpringMVC to review the running process of SpringMVC. Then we posted a question, “why does the Handler handle the request using HandlerAdapter instead of handling itself?”. I guessed it was about Adapter Design Pattern, but for compatibility instead of scalability.</p><h2 id="Environment-amp-Tools"><a href="#Environment-amp-Tools" class="headerlink" title="Environment &amp; Tools"></a>Environment &amp; Tools</h2><p>IntelliJ IDEA 2018.3 (Ultimate Edition), JRE: 1.8, maven 3.6, SpringBoot 2.0.5.RELEASE, </p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="Adapter-Design-Pattern"><a href="#Adapter-Design-Pattern" class="headerlink" title="Adapter Design Pattern"></a>Adapter Design Pattern</h3><p>Before looking into HandlerAdapter to find out how it uses Adapter Design Pattern, let’s take a quick glance at what Adapter Design Pattern is.</p><blockquote><p>适配器模式（Adapter），将一个类的接口转换成客户希望的另外一个接口。adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g1atywr3wnj30ka0atjuu.jpg" alt="2019.03.21 - 01"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// when we need Adaptee, we use Adapter instead of Adaptee</span></span><br><span class="line">Target target=<span class="keyword">new</span> Adapter();</span><br><span class="line">target.request();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Target is an abstraction of Adapter, designed to lower coupling </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"普通的请求"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the real Adapter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Target</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee=<span class="keyword">new</span> Adaptee();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">// when we use Adapter, we are actually using Adaptee</span></span><br><span class="line">        adaptee.specificRequest(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adaptee which is not suitable to newly situation and needs to be adapted</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"特殊的请求"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>Let’s find out why and how SpringMVC uses Adapter Design Pattern in HandlerAdapter.</p><p>When it iterates <code>List&lt;HandlerAdapter&gt; handlerAdapters</code>, it has 3 handlerAdapters, including <code>RequestMappingHandlerAdapter</code>, <code>HttpRequestHandlerAdapter</code> and <code>SimpleControllerHandlerAdapter</code></p><p><img src="/Users/tony.chenjy/Desktop/2019.03.20 - 02.png" alt="2019.03.20 - 02"></p><p>Then it uses <code>RequestMappingHandlerAdapter</code> to handle the request, because the <code>GreetingController.greeting()</code> is annotated with @RequestMapping</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g1au0ptdm5j313r0nn42a.jpg" alt="2019.03.21 - 03"></p><p>Apparently, <code>DispatcherServlet</code> is exactly the client who uses the adapter</p><p><code>HandlerAdapter</code> is the Target which is an abstraction of Adapter</p><p><img src="/Users/tony.chenjy/Desktop/2019.03.21 - 04.png" alt="2019.03.21 - 04"></p><p><code>AbstractHandlerMethodAdapter or RequestMappingHandlerAdapter</code> is the Adapter to <code>HandlerMethod</code> Adaptee</p><p><img src="/Users/tony.chenjy/Desktop/2019.03.21 - 05.png" alt="2019.03.21 - 05"></p><p><code>HttpRequestHandlerAdapter</code> is the Adapter to <code>HttpRequestHandler</code> Adaptee</p><p><img src="/Users/tony.chenjy/Desktop/2019.03.21 - 06.png" alt="2019.03.21 - 06"></p><p><code>SimpleServletHandlerAdapter</code> is the Adapter to <code>Servlet</code> Adaptee</p><p><img src="/Users/tony.chenjy/Desktop/2019.03.21 - 07.png" alt="2019.03.21 - 07"></p><p><code>SimpleControllerHandlerAdapter</code> is the Adapter to <code>Controller</code> Adaptee</p><p><img src="/Users/tony.chenjy/Desktop/2019.03.21 - 08.png" alt="2019.03.21 - 08"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Adapter Design Pattern: Most of time Adapter is used to encapsulate the Adaptee which is out of style or no longer convenient to use. So we define an adapter and encapsulate the complexity of using the Adaptee. So that we can use the Adaptee function by using the Adapter more conveniently.</p><p>In my opinion, HandlerAdapter in SpringMVC could be used to be compatible with <code>Servlet</code>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/qq_41790833/article/details/84348283" target="_blank" rel="noopener">《大话设计模式–适配器模式》笔记</a></p><p><a href="https://blog.csdn.net/a362212624/article/details/80431499" target="_blank" rel="noopener">看springmvc适配器模式—HandlerAdapter</a></p><p><a href="https://blog.csdn.net/qq924862077/article/details/53842993" target="_blank" rel="noopener">springMVC源码分析–HandlerAdapter（一）</a></p><p><a href="https://blog.csdn.net/qq924862077/article/details/53843251" target="_blank" rel="noopener">springMVC源码分析–SimpleServletHandlerAdapter（二）</a></p><p><a href="https://blog.csdn.net/qq924862077/article/details/53843393" target="_blank" rel="noopener">springMVC源码分析–SimpleControllerHandlerAdapter（三）</a></p><p><a href="https://blog.csdn.net/qq924862077/article/details/53843466" target="_blank" rel="noopener">springMVC源码分析–HttpRequestHandlerAdapter（四）</a></p><p><a href="https://www.cnblogs.com/deng-cc/p/6927447.html" target="_blank" rel="noopener">使用IntelliJ IDEA查看类的继承关系图形</a></p><p><a href="https://blog.csdn.net/HeatDeath/article/details/79468782" target="_blank" rel="noopener">Intellij IDEA 查找接口实现类的快捷键</a></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q: The structure of Adapter Design Pattern is quite similar to that of Proxy Design Pattern, so what is the difference between them?</p><p>A: In Adapter Design Pattern, we only invoke the Adaptee. But in Proxy Design Pattern, we will do some thing else before or after we invoke the proxied subject.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> Adapter Design Pattern </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringMVC】SpringMVC Source Code - Running Process</title>
      <link href="/2019/03/20/0009-springmvc-source-code/"/>
      <url>/2019/03/20/0009-springmvc-source-code/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;mid=2247486990&amp;idx=1&amp;sn=fbebd79e84896f8efea1e905b7297354&amp;chksm=e8fe9207df891b11a47297ee1e06eac9672926a9d4478ac565ac9534706730d8e19141a77918&amp;scene=0&amp;xtrack=1&amp;pass_ticket=lXR%2FK2m%2FVFNS5RWEyu2GLy85AqtjRhIQViLUNikOv2PNaA9YBLCS2cmwLBClm3%2B8#rd" target="_blank" rel="noopener">面试题：来给我说一下Spring MVC的执行过程？</a></p><p>After reading the passage above, I feel more confused about how SpringMVC runs, what HandlerMapping is, what differences between HandlerMapping and HandlerAdapter, etc. Talk is cheap, so let’s dive into the source code to make it clear.</p><p>In order to understand the running process of SpringMVC through source code reading, we are gonna build a SpringMVC project using IDEA firstly.</p><h2 id="Environment-amp-Tools"><a href="#Environment-amp-Tools" class="headerlink" title="Environment &amp; Tools"></a>Environment &amp; Tools</h2><p>IntelliJ IDEA 2018.3 (Ultimate Edition), JRE: 1.8, maven 3.6, SpringBoot 2.0.5.RELEASE, </p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="build-a-SpringMVC-project"><a href="#build-a-SpringMVC-project" class="headerlink" title="build a SpringMVC project"></a>build a SpringMVC project</h3><p>download the project: <code>git clone https://github.com/spring-guides/gs-serving-web-content.git</code></p><p>open in IDEA: complete is the whole project, while initial is only the framework</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mfjqcd0j30bx08qdfv.jpg" alt="2019.03.20 - 01"></p><p>run the project</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g19mfywexij30ys0eswfa.jpg" alt="2019.03.20 - 02"></p><p>visit <code>http://localhost:8080/greeting</code> in browser, succeed</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mh7vdt8j30ex06mmx4.jpg" alt="2019.03.20 - 03"></p><h3 id="source-code-reading-in-debug-mode"><a href="#source-code-reading-in-debug-mode" class="headerlink" title="source code reading in debug mode"></a>source code reading in debug mode</h3><p>rerun the project in debug mode</p><p>download the source code and start from <code>DispatcherServlet</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g19mi6l2mhj30dh0jbq3h.jpg" alt="2019.03.20 - 04"></p><p>if failed downloading, try <code>mvn dependency:resolve -Dclassifier=sources</code> in terminal</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mhz34mmj309101ujr6.jpg" alt="2019.03.20 - 05"></p><h4 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h4><p>from the comment, we can easily get to know that <code>doDispatch() process the actual dispatching to the handler</code></p><p>so after setting a breakpoint in <code>doDispatch()</code> and visit <code>http://localhost:8080/greeting</code> in the browser, we get to this</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g19mkyu1sqj30za0kxwhg.jpg" alt="2019.03.20 - 06"></p><p>then we skip over to the method <code>getHandler()</code> and skip into it</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mkir0j8j311a0dugng.jpg" alt="2019.03.20 - 07"></p><h4 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h4><p>it iterates the list of <code>HandlerMapping</code> and get a handler in type of <code>HandlerExecutionChain</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g19mmelg9mj30f308haac.jpg" alt="2019.03.20 - 08"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g19mmkfn3jj31dc0lwdji.jpg" alt="2019.03.20 - 09"></p><p>then we come to <code>getHandlerAdapter()</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mm6r480j31250ggwgr.jpg" alt="2019.03.20 - 10"></p><h4 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h4><p>again, it iterates the list of <code>HandlerAdapter</code> and get a <code>HandlerAdapter</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g19mnv9vuej31890kb0w5.jpg" alt="2019.03.20 - 11"></p><p>run some preHandle with <code>interceptors.preHandle()</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g19mo564buj312i0m541g.jpg" alt="2019.03.20 - 12"></p><p>invoke the handler through <code>HandlerAdapter</code>, and get <code>ModelAndView</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g19moofxd6j310a0k9417.jpg" alt="2019.03.20 - 13"></p><p>run some postHandle with <code>interceptors.postHandle()</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g19mq3cfrhj313w0iago4.jpg" alt="2019.03.20 - 14"></p><p>then we come to <code>processDispatchResult()</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mqct3xxj314f0iumzx.jpg" alt="2019.03.20 - 15"></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g19mqrap7oj314c0pfjve.jpg" alt="2019.03.20 - 16"></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g19mr3uy7xj313l0njdjj.jpg" alt="2019.03.20 - 17"></p><h4 id="ViewResolver"><a href="#ViewResolver" class="headerlink" title="ViewResolver"></a>ViewResolver</h4><p>it iterates the list of <code>ViewResolver</code> and get a view</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g19mrb982oj31090pcn16.jpg" alt="2019.03.20 - 18"></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In conclusion, when we post a request, it will be intercepted and handled by <code>DispatcherServlet</code> in doDispatch() method. Then it iterates <code>List&lt;HandlerMapping&gt; handlerMappings</code> to get <code>HandlerExecutionChain handler</code>, which is where the controller belongs to. Then it iterates <code>List&lt;HandlerAdapter&gt; handlerAdapters</code> to get <code>HandlerAdapter ha</code>, which is used to execute the controller we define. Then run <code>HandlerInterceptor[] interceptors.preHandle()</code>, execute <code>HandlerExecutionChain handler</code> through <code>HandlerAdapter ha</code> and get <code>ModelAndView mv</code>, run <code>HandlerInterceptor[] interceptors.postHandle()</code>. Finally, it iterates <code>List&lt;ViewResolver&gt; viewResolvers</code> to render <code>ModelAndView mv</code>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://spring.io/guides/gs/serving-web-content/" target="_blank" rel="noopener">官网-Serving Web Content with Spring MVC</a></p><p><a href="https://www.cnblogs.com/wormday/p/8435617.html" target="_blank" rel="noopener">IDEA建立Spring MVC Hello World 详细入门教程</a></p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html" target="_blank" rel="noopener">官网-Web on Servlet Stack</a></p><p><a href="https://blog.csdn.net/hotdust/article/details/69524869" target="_blank" rel="noopener">idea 无法下载依赖包的source，使用maven下载source</a></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q: What is these: multipart resolver, HandlerMapping, HandlerExecutionChain, HandlerAdapter, ModelAndView?</p><p>Q: Why do we use <code>HandlerAdapter ha</code> to execute <code>HandlerExecutionChain handler</code>? </p><p>A: I guess it relates to the <code>Adapter Design Pattern</code>, and for scalability.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RDP】deploy RDP report server on linux</title>
      <link href="/2019/03/12/0008-rdp-on-linux/"/>
      <url>/2019/03/12/0008-rdp-on-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Environment-amp-Tools"><a href="#Environment-amp-Tools" class="headerlink" title="Environment &amp; Tools"></a>Environment &amp; Tools</h2><p>CentOS 7, open-jdk 1.8.0_201, tomcat 8.5.38, mysql 5.5.62, RDP报表工具v2.3.8, </p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="check-and-start-mysqld-service"><a href="#check-and-start-mysqld-service" class="headerlink" title="check and start mysqld service"></a>check and start mysqld service</h3><p>查看mysql状态并启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service mysqld status</span><br><span class="line">service mysqld start</span><br><span class="line">mysql -uroot -p</span><br><span class="line">select version();</span><br></pre></td></tr></table></figure></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g10c3f97ezj30g1094mxb.jpg" alt="2019.03.12 - 01 - 001"></p><p>创建并导入数据库（注意自身数据库的编码方式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create database rdp_server;</span><br><span class="line">use rdp_server;</span><br><span class="line">set names utf8;</span><br><span class="line">source ~/resources/rdp_server.sql;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><blockquote><p>rdp_server.sql文件是从官网下载的windows版本免安装数据库中dump出来的structure and data.</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g10c4geaicj30an0d1t8x.jpg" alt="2019.03.12 - 01 - 002"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g10c4pr8ydj307u0e8gln.jpg" alt="2019.03.12 - 01 - 003"></p><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><p>从官网下载：<a href="http://product.mftcc.cn/rdp/download.html" target="_blank" rel="noopener">RDP 报表工具</a></p><p>因为要登录，所以只能通过浏览器下载。</p><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><p>解压：<code>unzip BDDPx64.zip</code></p><blockquote><p><code>-q</code> 执行时不显示任何信息</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g10c5thcsij30au02wq2s.jpg" alt="2019.03.12 - 01 - 004"></p><h3 id="modify-configurations"><a href="#modify-configurations" class="headerlink" title="modify configurations"></a>modify configurations</h3><p>进入配置目录</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g10c66jry8j30ij03k3yi.jpg" alt="2019.03.12 - 01 - 005"></p><p>修改log4j配置：log4j.properties</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g10c6f5bx6j30iw0egq3o.jpg" alt="2019.03.12 - 01 - 006"></p><p>修改数据源配置：application-prod.yml</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g10c6pffo9j30ha0e4gm1.jpg" alt="2019.03.12 - 01 - 007"></p><h3 id="startup-tomcat"><a href="#startup-tomcat" class="headerlink" title="startup tomcat"></a>startup tomcat</h3><blockquote><p>RDP报表工具在Linux系统上要求运行在自己的tomcat上</p></blockquote><p>将BDDPx64/webapps/RDP-SERVER移到tomcat的webapps目录下</p><p>启动tomcat：<code>bin/startup.sh</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g10d4mpbqlj30vi0bqk0t.jpg" alt="屏幕快照 2019-03-12 22.04.32"></p><p>登陆管理后台：<code>http://{ip}:8080/RDP-SERVER</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g10do3vhsjj31ej0u0b2a.jpg" alt="屏幕快照 2019-03-12 22.25.29"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://product.mftcc.cn/rdp/download.html" target="_blank" rel="noopener">RDP 报表工具</a></p><p><a href="https://www.cnblogs.com/walblog/articles/7890442.html" target="_blank" rel="noopener">在Centos中导入sql文件的方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RDP report </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hadoop】dr.who hadoop YARN</title>
      <link href="/2019/03/02/0007-hadoop-dr-who/"/>
      <url>/2019/03/02/0007-hadoop-dr-who/</url>
      
        <content type="html"><![CDATA[<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>Hadoop 2.7.2, docker</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>使用docker创建三个hadoop容器搭建伪分布式集群，在hadoop上面跑job，一段时间后会出现user为dr.who的无意义的job一直UNDEFINED，占用yarn资源，导致一些job没办法执行。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0owg1qlymj31h80u0k1d.jpg" alt="屏幕快照 2019-03-02 23.36.27"></p><p>而dr.who则是某种默认用户</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0owlu3pvzj327002e75c.jpg" alt="屏幕快照 2019-03-03 00.09.37"></p><p>所以需要修改配置，在core-site.xml添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0owmjotnsj30vm0j0qg5.jpg" alt="屏幕快照 2019-03-02 23.39.20"></p><p>2019.03.12更新：</p><p>之后又出现了user为yarn的无意义job，通过top命令查看，占用内存超过100%</p><p>通过<code>ps -ef | grep java</code>查看，出现<code>/var/tmp/java -c /var/tmp/w.conf</code>，通过<code>crontab -l</code>查看有个定时任务，估计是中了病毒，然后：</p><p>1.通过<code>kill -9 {pid}</code>关闭进程</p><p>2.通过<code>crontab -r</code>移除定时任务</p><p>2019.03.19更新：</p><p>通过以上两步能及时解决CPU占用超过100%的情况，但是只是暂时，只要打开hadoop就会不断被黑，然后终于找到一个永久解决的办法：在core-site.xml配置文件中增加如下三行，以及创建<code>/hadoop/hdfs/hadoop-http-auth-signature-secret</code>文件，里面输入自己想要的密码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.filter.initializers<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.security.AuthenticationFilterInitializer<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.authentication.type<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>simple<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.authentication.signature.secret.file<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/hadoop/hdfs/hadoop-http-auth-signature-secret<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/sin_geek/article/details/84058243" target="_blank" rel="noopener">Hadoop dr.who问题</a></p><p>其他关于virus attack的解决办法：</p><p><a href="https://community.hortonworks.com/questions/191672/yarn-application-undefined-created-by-drwho.html#answer-form" target="_blank" rel="noopener">Yarn application undefined created by dr.who</a></p><p>2019.03.12 更新：</p><p><a href="https://zhangnew.com/hadoop-yarn-safe.html" target="_blank" rel="noopener">Hadoop Yarn 未授权访问导致被攻击</a></p><p><a href="https://cloud.tencent.com/developer/ask/128776" target="_blank" rel="noopener">这似乎是yarn被木马感染，即使我重新安装我的电脑？</a></p><p><a href="https://www.cnblogs.com/daxiangfei/p/9198856.html" target="_blank" rel="noopener">yarn一直在跑一个用户为dr.who的application</a></p><p><a href="https://www.cnblogs.com/kxdblog/p/4211940.html" target="_blank" rel="noopener">Centos定时启动和清除任务</a></p><p><a href="https://www.jianshu.com/p/90c12c366d79" target="_blank" rel="noopener">Hadoop 权限认证</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> dr.who </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch】install ik analysis plugin</title>
      <link href="/2019/02/19/0006-es-ik-install/"/>
      <url>/2019/02/19/0006-es-ik-install/</url>
      
        <content type="html"><![CDATA[<p>ik是大名鼎鼎的中文分词器插件，支持<code>ik_smart</code>(最粗粒度拆分)和<code>ik_max_word</code>(最细粒度拆分)两种分词器，支持扩展分词字典&amp;停止词字典，支持远程扩展字典&amp;停止词字典，支持热更新分词字典（由于Elasticsearch是通过docker-compose安装的，所以考虑通过解压zip文件安装）</p><h2 id="Environment-amp-Tools"><a href="#Environment-amp-Tools" class="headerlink" title="Environment &amp; Tools"></a>Environment &amp; Tools</h2><p>centos7, Elasticsearch 6.6.0, ik v6.6.0, </p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="add-volumes-mapping"><a href="#add-volumes-mapping" class="headerlink" title="add volumes mapping"></a>add volumes mapping</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0hhbq34ubj30fy0p0gmb.jpg" alt="2019.02.19 - 01 - 01"></p><h3 id="download-package-amp-restart"><a href="#download-package-amp-restart" class="headerlink" title="download package &amp; restart"></a>download package &amp; restart</h3><p>进入本地插件目录：<code>cd esplugins/</code></p><p>创建ik目录：<code>mkdir ik</code></p><p>进入ik目录：<code>cd ik/</code></p><p>PS: 从<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">ik release</a>选择与es对应的版本，右键获取下载链接（我这里使用<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.6.0/elasticsearch-analysis-ik-6.6.0.zip" target="_blank" rel="noopener">v6.6.0</a>）</p><p>下载ik插件：<code>wget https://github.com/medcl/elasticsearch-analysis-ik/archive/v6.6.0.tar.gz</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0hhd55eo2j30la0abgm7.jpg" alt="2019.02.19 - 01 - 02"></p><p>上面下载错了source code，再来：<code>wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.6.0/elasticsearch-analysis-ik-6.6.0.zip</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0hhdzn0gtj30li0dxdh2.jpg" alt="2019.02.19 - 01 - 03"></p><p>解压：<code>unzip elasticsearch-analysis-ik-6.6.0.zip</code></p><p>回到docker-compose.yml文件所在目录，启动es集群：<code>docker-compose up</code></p><p>访问9200端口验证es启动成功：<code>http://{ip}:9200</code></p><p>访问5601端口验证kibana启动成功：<code>http://{ip}:5601</code></p><h3 id="run-some-test"><a href="#run-some-test" class="headerlink" title="run some test"></a>run some test</h3><p>在kibana中运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;中华人民共和国国歌&quot;,</span><br><span class="line">  &quot;tokenizer&quot;: &quot;ik_smart&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0hhg4u3bij30sl0i4jsp.jpg" alt="2019.02.19 - 01 - 04"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;中华人民共和国国歌&quot;,</span><br><span class="line">  &quot;tokenizer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0hhgbgoy2j30u40i8abl.jpg" alt="2019.02.19 - 01 - 05"></p><p>more：<a href="https://github.com/medcl/elasticsearch-analysis-ik#quick-example" target="_blank" rel="noopener">Quick Example</a></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0hhfeq0iyj31120p0go1.jpg" alt="2019.02.19 - 01 - 06"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">IK Analysis for Elasticsearch</a></p><p><a href="https://www.jianshu.com/p/85665ae5d660" target="_blank" rel="noopener">docker 中安裝elasticsearch和ik安裝配置</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> ik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】synchronize fork project</title>
      <link href="/2019/02/17/0005-git-fork-update/"/>
      <url>/2019/02/17/0005-git-fork-update/</url>
      
        <content type="html"><![CDATA[<p>之前修改了hexo cactus主题一些中文配置后创建的pull request(<a href="https://tony-chenjy.github.io/2019/02/16/0004-git-pull-request/" target="_blank" rel="noopener">first pull request</a>)已经被原作者merge了。由于原始仓库也有了其他的一些更新，所以接下来就需要把原始仓库的更新同步到个人的远程仓库。</p><p>具体做法是：1. 本地仓库与原始仓库建立关联；2. 将原始仓库的更新fetch到本地仓库；3. 本地仓库通过create pull request的方式更新到个人远程仓库。（关于本地仓库/原始仓库/远程仓库的理解，参考：<a href="https://tony-chenjy.github.io/2019/02/13/0002-local-push-github/" target="_blank" rel="noopener">push local project to github</a>）</p><h2 id="Guide-TODO"><a href="#Guide-TODO" class="headerlink" title="Guide // TODO"></a>Guide // TODO</h2><h3 id="add-original-repository"><a href="#add-original-repository" class="headerlink" title="add original repository"></a>add original repository</h3><p>查看当前所在分支：<code>git branch</code></p><p>切换到pull request专用分支branch-tony: <code>git checkout branch-tony</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0hcl370qij30oi07wn1m.jpg" alt="屏幕快照 2019-02-24 11.21.02"></p><p>查看远程仓库关联信息：<code>git remote -v</code></p><p>添加原始远程仓库关联：<code>git remote add upstream https://github.com/probberechts/hexo-theme-cactus.git</code></p><p>（自定义原始仓库标识为upstream）</p><p>再次查看远程仓库关联信息：<code>git remote -v</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0hct9mbezj30ve096k0z.jpg" alt="屏幕快照 2019-02-24 11.29.18"></p><h3 id="fetch-from-original-repository-to-local"><a href="#fetch-from-original-repository-to-local" class="headerlink" title="fetch from original repository to local"></a>fetch from original repository to local</h3><p>更新原始仓库到本地仓库branch-tony分支，以及merge说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream master</span><br><span class="line">git pull upstream master</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0hd1nm2puj30pa09sjyw.jpg" alt="屏幕快照 2019-02-24 11.36.17"> </p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0hd1um7qkj30vi0iytji.jpg" alt="屏幕快照 2019-02-24 11.35.30"></p><p>更新到远程仓库branch-tony分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;update from original repo&quot;</span><br><span class="line">git push origin branch-tony</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0hdjw9d6rj30sk0ba48c.jpg" alt="屏幕快照 2019-02-24 11.42.07"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0hdkb7r1pj31je0myq8v.jpg" alt="屏幕快照 2019-02-24 11.55.13"></p><h3 id="create-pull-request-to-origin-master"><a href="#create-pull-request-to-origin-master" class="headerlink" title="create pull request to origin master"></a>create pull request to origin master</h3><p>Compare &amp; pull request, 选择个人远程仓库的master分支</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0hdpq04h7j31310u045f.jpg" alt="屏幕快照 2019-02-24 11.59.09"></p><p>编辑commit comment，create pull request</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0hdqhbefxj30zx0u044l.jpg" alt="屏幕快照 2019-02-24 11.59.40"></p><p>没有conflict就可以merge到master分支</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0hdtou37oj317i0ts7ah.jpg" alt="屏幕快照 2019-02-24 12.03.57"></p><p>然后本地仓库再切换到master分支：<code>git checkout master</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0he2fonoqj30ks05yjva.jpg" alt="屏幕快照 2019-02-24 12.11.53"></p><p>从个人远程仓库fetch到本地仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0he2ru3kej30ny0b6118.jpg" alt="屏幕快照 2019-02-24 12.12.47"></p><p>个人远程仓库与原始仓库同步完毕。</p><p>PS: 注意分支branch-tony是专门用于create pull request，分支master才是做自定义配置和日常使用。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/walblog/articles/9061960.html" target="_blank" rel="noopener">github如何实现fork的项目与原项目同步</a></p><p><a href="https://www.cnblogs.com/relucent/p/6479213.html" target="_blank" rel="noopener">Github上fork项目后与原项目保持同步</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】first pull request(already merged)</title>
      <link href="/2019/02/16/0004-git-pull-request/"/>
      <url>/2019/02/16/0004-git-pull-request/</url>
      
        <content type="html"><![CDATA[<p>在使用 Hexo + github 搭建博客平台之后，更换主题为cactus，一款黑色背景的护眼主题，发现存在不完善的地方，于是本着对其进行完善的目的，顺便学习 create pull request （也就是当github上的开源项目在使用过程中出现个性化的需求，便可以通过fork定制符合个人需求的版本，或者通过pull request完善其功能）</p><p>PS: 关于git分支，每次创建git仓库或者fork原始仓库，都会默认创建一个master分支，一般情况下对于自己创建的仓库都是直接使用<code>git push origin master</code>直接更新master分支内容，而当我们需要修改他人的远程仓库的内容，由于权限问题只能通过创建pull request，提交修改，理论上可以直接将自己master分支的修改创建pull request，但一般都是创建一个专门用于pull request的分支，这样就能保持master分支一些定制化的设置，所以更通用更新远程仓库（自己的远程仓库或他人的远程仓库）的方法是统一使用创建pull request的方法，对于自己的远程仓库可以自己merge，虽然这样显得有些麻烦，但是通用。所以更新个人远程仓库的两种方法：1. <code>git push origin master</code>, 2. create pull request.</p><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>为使用<code>hexo s</code>启动遇到的”bad indentation”问题创建<code>pull request</code><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0937rmdxej30vg0dsnau.jpg" alt="屏幕快照 2019-02-17 07.52.08"></p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="fork-original-repository"><a href="#fork-original-repository" class="headerlink" title="fork original repository"></a>fork original repository</h3><p>进入hexo博客目录</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08qmctujej30nk06qq3z.jpg" alt="屏幕快照 2019-02-16 01"></p><p>删除themes目录下的cactus主题：<code>rm -rf themes/cactus</code></p><p>fork原始仓库</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g08qljuarbj31lk0qyjyf.jpg" alt="屏幕快照 2019-02-16 02"></p><p>clone个人远程仓库到themes目录</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08qqgureuj30vk092ahs.jpg" alt="屏幕快照 2019-02-16 03"></p><p>重命名：<code>mv hexo-theme-cactus cactus</code></p><h3 id="checkout-a-branch-amp-modify"><a href="#checkout-a-branch-amp-modify" class="headerlink" title="checkout a branch &amp; modify"></a>checkout a branch &amp; modify</h3><p>创建并进入pull request专用分支：<code>git checkout -b branch-tony</code></p><p>修改languages/zh-TW.yml：找到<code>page: %d / %d</code>改为<code>page: 第 %d 頁，共 %d 頁</code></p><p>提交代码到pull request专用分支：branch-tony</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g093z868x1j30vo0gik17.jpg" alt="屏幕快照 2019-02-17 08.13.03"></p><h3 id="create-a-pull-request"><a href="#create-a-pull-request" class="headerlink" title="create a pull request"></a>create a pull request</h3><p>这时看到github个人远程仓库中多了一个branch，点击<code>Compare &amp; pull request</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0940nb3ghj31j80mmter.jpg" alt="屏幕快照 2019-02-17 08.17.02"></p><p>编辑并<code>Create pull request</code>（编辑忘记截图）</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g094a1smyej31k20msag5.jpg" alt="屏幕快照 2019-02-17 08.30.24"></p><h3 id="complete-amp-wait-for-merger"><a href="#complete-amp-wait-for-merger" class="headerlink" title="complete &amp; wait for merger"></a>complete &amp; wait for merger</h3><p>完成，等待原作者的comment &amp; merge</p><p>总结：当我们使用github上的开源项目发现有bug而自己又能修复时，需要：1.先把原始仓库fork到个人远程仓库（注意这时个人远程仓库与原始仓库是独立的两个仓库）；2.git clone到本地；3.创建pull request branch，修改并push到远程仓库pull request branch；4.在github上create pull request（注意上方教程直接create pull request到原始仓库，实际上个人远程仓库中没有改变，这时可以再create pull request到个人远程仓库，一般建议创建pull request branch修改再create pull request，这样能保持个人远程仓库定制化的配置。）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/zhangjianbin/p/7774073.html" target="_blank" rel="noopener">创建 Pull Request</a></p><p><a href="https://blog.csdn.net/wangzi11111111/article/details/79861056" target="_blank" rel="noopener">如何使用github中的pull request功能？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Elasticsearch】using docker-compose to set up elasticsearch cluster</title>
      <link href="/2019/02/14/0003-linode-centos7-es-cluster/"/>
      <url>/2019/02/14/0003-linode-centos7-es-cluster/</url>
      
        <content type="html"><![CDATA[<p>在学习Elasticsearch框架之前，必须先让Elasticsearch集群跑起来，最简单且容易迁移的办法就是使用docker。</p><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>搭建Elasticsearch集群，并完成测试。</p><h2 id="Environment-amp-Tools"><a href="#Environment-amp-Tools" class="headerlink" title="Environment &amp; Tools"></a>Environment &amp; Tools</h2><p>centos7, openjdk1.8, docker 18.09.1, docker-compose 1.23.2, </p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看jdk版本：java -version</span><br><span class="line">查看docker版本：docker version</span><br><span class="line">查看docker-compose版本：docker-compose version</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09t8xqvqfj30bk01ut8k.jpg" alt="2019.02.14 - 01 - 01"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09t98sfx8j30ag0a7q34.jpg" alt="2019.02.14 - 01 - 02"></p><h3 id="通过docker安装Elasticsearch（参考Elasticsearch官网）"><a href="#通过docker安装Elasticsearch（参考Elasticsearch官网）" class="headerlink" title="通过docker安装Elasticsearch（参考Elasticsearch官网）"></a>通过docker安装Elasticsearch（参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Elasticsearch官网</a>）</h3><p>通过docker拉取es镜像：<code>docker pull docker.elastic.co/elasticsearch/elasticsearch:6.6.0</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09tbjztb9j30iq04vjrh.jpg" alt="2019.02.14 - 01 - 03"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09tc26joxj30od03yq32.jpg" alt="2019.02.14 - 01 - 04"></p><p>设置kernel setting：<code>sysctl -w vm.max_map_count=262144</code>（PS： 每次重启服务器都需要设置，文末提供永久设置的方法）</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09tcisvicj30bt00zjr6.jpg" alt="2019.02.14 - 01 - 05"></p><p>创建并进入目录：<code>~/docker/elk</code></p><p>创建并编辑docker-compose.yml：<code>vim docker-compose.yml</code></p><p>保存并退出：<code>:wq</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09td093ruj30g90p1t95.jpg" alt="2019.02.14 - 01 - 06"></p><p>启动当前docker-compose容器：<code>docker-compose up</code>（后台启动：<code>docker-compose up -d</code>）</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09tdnsuosj309b01zt8j.jpg" alt="2019.02.14 - 01 - 07"></p><p>测试es是否成功启动：访问<code>http://{ip}:9200</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09te3srlsj30gx0bdjro.jpg" alt="2019.02.14 - 01 - 08"></p><p>关闭当前docker-compose容器：<code>docker-compose down</code></p><h3 id="在docker上集成运行Kibana（Kibana实现Elasticsearch的数据可视化，部分参考Kibana官网）"><a href="#在docker上集成运行Kibana（Kibana实现Elasticsearch的数据可视化，部分参考Kibana官网）" class="headerlink" title="在docker上集成运行Kibana（Kibana实现Elasticsearch的数据可视化，部分参考Kibana官网）"></a>在docker上集成运行Kibana（Kibana实现Elasticsearch的数据可视化，部分参考<a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">Kibana官网</a>）</h3><p>通过docker拉取kibana镜像：<code>docker pull docker.elastic.co/kibana/kibana:6.6.0</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09tfr6ouhj30fw05ljri.jpg" alt="2019.02.14 - 01 - 09"></p><p>进入目录：<code>~/docker/elk</code></p><p>再次编辑docker-compose.yml（即es的docker-compose.yml）：<code>vim docker-compose.yml</code></p><p>保存并退出：<code>:wq</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09tg0ijrlj30gs0ow74w.jpg" alt="2019.02.14 - 01 - 10"></p><p>启动当前docker-compose容器：<code>docker-compose up</code>（后台启动：<code>docker-compose up -d</code>）</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09tgenen2j30b101x0sk.jpg" alt="2019.02.14 - 01 - 11"></p><p>测试kibana是否成功启动：访问<code>http://{ip}:5601</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09tgp2o66j30bl0iq75p.jpg" alt="2019.02.14 - 01 - 12"></p><p>成功搭建Elasticsearch应用，可以开始开发全文检索服务了</p><p>PS：docker启动的容器每次关闭之后数据就会自动清除，如果想要保存数据就要做存储映射，即把容器的数据映射到本机。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>实现容器数据映射到主机，只需要修改docker-compose.yml：<code>vim docker-compose.yml</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09tiobh3wj30h70p00td.jpg" alt="2019.02.14 - 01 - 13"></p><p>再次启动发现报错</p><blockquote><p>遇到问题：<code>java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes</code></p><p>问题原因：容器内用户在宿主机创建映射目录，但是没有写权限</p><p>解决办法：<code>chmod 777 ./esdata*</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09tm413kxj30d3035mx3.jpg" alt="2019.02.14 - 01 - 14"></p><p>参考：<a href="https://blog.csdn.net/A_Story_Donkey/article/details/85235234" target="_blank" rel="noopener">docker elasticsearch挂载宿主机报 java.nio.file.AccessDeniedException: /usr/share/elasticsearch/data/nodes</a></p></blockquote><p>然后再次启动就能正常。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Elasticsearch官网</a></p><p><a href="https://www.elastic.co/guide/en/kibana/current/docker.html" target="_blank" rel="noopener">Kibana官网</a></p><h2 id="Problem-Shooting"><a href="#Problem-Shooting" class="headerlink" title="Problem Shooting"></a>Problem Shooting</h2><p>###1. Creating network “elk_default” with the default driver ERROR: Failed to Setup IP tables: Unable to enable SKIP DNAT rule:  (iptables failed: iptables –wait -t nat -I DOCKER -i br-15789cc8f3fb -j RETURN: iptables: No chain/target/match by that name. (exit status 1))</p><p>重新启动docker服务：<code>systemctl restart docker</code></p><h3 id="2-永久设置kernel-setting"><a href="#2-永久设置kernel-setting" class="headerlink" title="2. 永久设置kernel setting"></a>2. 永久设置kernel setting</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改系统设置：vim /etc/sysctl.conf</span><br><span class="line">在尾行添加以下内容：vm.max_map_count=262144</span><br><span class="line">执行命令：sysctl -p</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/qq_35394891/article/details/84345747" target="_blank" rel="noopener">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</a></p><h3 id="3-通过docker-compose-up-d后台启动如何查看启动日志"><a href="#3-通过docker-compose-up-d后台启动如何查看启动日志" class="headerlink" title="3. 通过docker-compose up -d后台启动如何查看启动日志"></a>3. 通过<code>docker-compose up -d</code>后台启动如何查看启动日志</h3><p>查看容器启动日志：<code>docker-compose logs</code></p><p>分页查看容器启动日志：<code>docker-compose logs | more</code>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> linode </tag>
            
            <tag> centos7 </tag>
            
            <tag> docker-compose </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【git】push local project to github</title>
      <link href="/2019/02/13/0002-local-push-github/"/>
      <url>/2019/02/13/0002-local-push-github/</url>
      
        <content type="html"><![CDATA[<p>对于创建项目，更常见的做法是在本地通过ide创建，如果想要利用github共享项目，协作开发，就需要把本地创建的项目初始化为git本地仓库，并与github远程仓库关联。</p><p>PS: 关于远程仓库与本地仓库，在github中的仓库都称为远程仓库，无论是自己创建的，从其他远程仓库fork来的，还是不属于自己的仓库，而本地仓库则是通过<code>git clone</code>下载到本地的仓库，本地仓库可以关联不同的远程仓库，对于自己创建的仓库或者fork的仓库能直接通过<code>add / commit / push</code>更新，而对于不属于自己的远程仓库则能通过<code>pull request</code>提交更新，等待原作者审核通过后<code>merge</code>。而分支branch，则是一个仓库的不同走向，默认存在master分支，目前暂时用到master分支。</p><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>在本地通过IDEA创建springboot项目，并将其与github远程仓库关联，测试基本的pull和push操作。</p><h2 id="Environment-amp-Tools"><a href="#Environment-amp-Tools" class="headerlink" title="Environment &amp; Tools"></a>Environment &amp; Tools</h2><p>Intellij IDEA ULTIMATE 2018.03, jdk 1.8, </p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="本地新建项目"><a href="#本地新建项目" class="headerlink" title="本地新建项目"></a>本地新建项目</h3><p>IDEA &gt; 菜单栏 File &gt; New &gt; Project &gt; Spring Initializr &gt; 填写项目信息，选择项目框架 &gt; Finish</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09jlshdiqj30np0lj3yz.jpg" alt="2019.02.13 - 02 - 01"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jmrk5anj30np0ljglv.jpg" alt="2019.02.13 - 02 - 02"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jo0lxhdj30np0lj0td.jpg" alt="2019.02.13 - 02 - 03"></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jo882cmj30np0lj3yj.jpg" alt="2019.02.13 - 02 - 04"></p><p>IDEA中删除自动创建的maven文件</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09jq05jd9j31hc0swq44.jpg" alt="2019.02.13 - 02 - 06"></p><h3 id="github新建仓库"><a href="#github新建仓库" class="headerlink" title="github新建仓库"></a>github新建仓库</h3><p>github &gt; New Repository &gt; 填写仓库信息，选择”Initialize this repository with a README”，选择.gitignore &gt; Create repository</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09joli92wj30lv0hi0ta.jpg" alt="2019.02.13 - 02 - 05"></p><h3 id="关联本地项目至github远程仓库"><a href="#关联本地项目至github远程仓库" class="headerlink" title="关联本地项目至github远程仓库"></a>关联本地项目至github远程仓库</h3><p>打开git工具，cd进入本地项目FullTextSearchService</p><p>初始化项目为git本地仓库：<code>git init</code></p><p>将所有文件添加到本地仓库：<code>git add .</code> </p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09jrhzmhpj30g50aamxm.jpg" alt="2019.02.13 - 02 - 07"></p><p>提交到本地仓库：<code>git commit -m &quot;init&quot;</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09jrw0ye1j30g70aajrw.jpg" alt="2019.02.13 - 02 - 08"></p><p>关联github远程仓库，仓库标识为origin：<code>git remote add origin https://github.com/tony-chenjy/FullTextSearchService.git</code></p><p>本地仓库内容push到origin远程仓库master分支：<code>git push -u origin master</code></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09jsdyrghj30g70aadge.jpg" alt="2019.02.13 - 02 - 09"></p><blockquote><p>遇到问题：<code>Updates were rejected because the remote contains work that you do</code></p><p>问题原因：由于初始化时生成了.gitignore和README文件，push之前没有pull最新版本导致报错。所以要先pull。（其实这个时候本地仓库已经关联上github远程仓库了，但是要先解决文件冲突）</p><p>解决办法：</p><p>查看本地仓库关联的所有远程仓库：<code>git remote -v</code></p><p>从远程仓库更新本地仓库：</p><p><code>git fetch</code></p><p><code>git pull</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g09jtj1w1mj30g80aajrt.jpg" alt="2019.02.13 - 02 - 10"></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09jw5pw0kj30g70aaaai.jpg" alt="2019.02.13 - 02 - 11"></p></blockquote><blockquote><p>遇到问题：<code>fatal: refusing to merge unrelated histories</code></p><p>问题原因：“其实这个问题是因为两个根本不相干的 git 库，一个是本地库，一个是远端库，然后本地要去推送到远端，远端觉得这个本地库跟自己不相干，所以告知无法合并”</p><p>解决办法：不相关仓库强制合并：<code>git pull origin master --allow-unrelated-histories</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g09jwl17n4j30g50aa0t6.jpg" alt="2019.02.13 - 02 - 12"></p><p>参考：<a href="https://www.centos.bz/2018/03/git-%e5%87%ba%e7%8e%b0-fatal-refusing-to-merge-unrelated-histories-%e9%94%99%e8%af%af/" target="_blank" rel="noopener">git 出现 fatal: refusing to merge unrelated histories 错误</a></p></blockquote><blockquote><p>遇到问题：<code>CONFLICT (add/add): Merge conflict in .gitignore</code></p><p>问题原因：.gitignore文件冲突</p><p>解决办法：</p><p>打开IDEA，修改冲突文件</p><p>在git中标记冲突解决：<code>git stash clear</code></p><p>参考：<a href="https://www.cnblogs.com/baby123/p/6588378.html" target="_blank" rel="noopener">git 冲突解决</a></p></blockquote><p>重新提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;conflict clear&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g09jxrpliij30g90abmxn.jpg" alt="2019.02.13 - 02 - 13"></p><p>本地仓库与github仓库同步完毕。</p><p>PS：其实如果在github创建空的仓库，关联的时候应该就不会出现冲突，但是通过合并两个.gitignore的文件就能同时使用github和IDEA排除提交的规则。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/shenchanghui/p/7184101.html" target="_blank" rel="noopener">如何把本地项目上传到Github</a>    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】using Hexo to set up a blog in github // TODO</title>
      <link href="/2019/02/12/0001-hexo-github-blog/"/>
      <url>/2019/02/12/0001-hexo-github-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>macbook pro 2018, </p><h2 id="Guide-TODO"><a href="#Guide-TODO" class="headerlink" title="Guide // TODO"></a>Guide // TODO</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://cxyxiaowu.com/posts/6993/" title="程序员小吴" target="_blank" rel="noopener">【新手向】从零开始搭建一个酷炫免费的个人博客</a></p><p><a href="https://github.com/probberechts/hexo-theme-cactus/blob/master/README.md" target="_blank" rel="noopener">hexo-theme-cactus</a></p><p><a href="https://www.jianshu.com/p/c42b48d26068/" target="_blank" rel="noopener">iPic - MAC图床神器</a></p><h2 id="Problem-Shooting"><a href="#Problem-Shooting" class="headerlink" title="Problem Shooting"></a>Problem Shooting</h2><h3 id="1-deploy-not-found-git"><a href="#1-deploy-not-found-git" class="headerlink" title="1. deploy not found: git"></a>1. deploy not found: git</h3><p><code>npm install --save hexo-deployer-git</code></p><p>参考：<a href="https://blog.csdn.net/weixin_36401046/article/details/52940313" target="_blank" rel="noopener">hexo d后 ERROR Deployer not found: git</a></p><h3 id="2-WARN-No-layout-index-html"><a href="#2-WARN-No-layout-index-html" class="headerlink" title="2. WARN No layout: index.html"></a>2. WARN No layout: index.html</h3><p>下载主题到themes中</p><p>参考：<a href="https://blog.csdn.net/Mint6/article/details/79830063" target="_blank" rel="noopener">hexo搭建博客出现的两个错误</a></p><h3 id="3-ERROR-Process-failed-languages-zh-TW-yml-YAMLException-bad-indentation-of-a-mapping-entry-at-line-42-column-9-page-d-d"><a href="#3-ERROR-Process-failed-languages-zh-TW-yml-YAMLException-bad-indentation-of-a-mapping-entry-at-line-42-column-9-page-d-d" class="headerlink" title="3. ERROR Process failed: languages/zh-TW.yml YAMLException: bad indentation of a mapping entry at line 42, column 9: page: %d / %d"></a>3. ERROR Process failed: languages/zh-TW.yml YAMLException: bad indentation of a mapping entry at line 42, column 9: page: %d / %d</h3><p>把<code>page: %d / %d</code>改为<code>page: Page %d of %d</code></p><p><a href="https://tony-chenjy.github.io/2019/02/17/git-pull-request/" target="_blank" rel="noopener">已向原始仓库创建pull request</a>      </p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/06/0000-hello-world/"/>
      <url>/2019/02/06/0000-hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
